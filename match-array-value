#SANI: Class one for Machine state
class StateMachine:

# Initialize 
    def start(self):
        #print("Starte machine")
        self.state = self.startState
        #print(self.startState)

# Step through the input
    def step(self, inp):
        #print("Step next:",self.state, inp)
        #print(self.state, inp)
        (s, o) = self.getNextValues(self.state, inp)
        #print(s, o)
        self.state = s
        #print(self.state)
        return o

# Loop through the input        
    def feeder(self, inputs):
        #final = []
        #print("Looping in machine")
        self.start()
        #for inp in inputs:
         #   final.append(self.step(inp))
        #return final
        # OR
        return [self.step(inp) for inp in inputs]
        


#SANI: Class two for returning true / false

# Determine the TRUE or FALSE state
class TextSeq(StateMachine): #class TextSeq is inherited from class StateMachine
    startState = 0
    def getNextValues(self, state, inp):
        #print("Work starts on next value")
        if state == 0 and inp == 'A':
            return (1, True)
        elif state == 1 and inp == 'G':
            return (2, True)
        elif state == 2 and inp == 'C':
            return (0, True)
        else:
            return (3, False)


# SANI: Usage.
check_sequence = TextSeq() #SANI: create instance of class Textseq

output = check_sequence.feeder(['A','A','A'])
#print(output)

output = check_sequence.feeder(['A', 'G', 'C', 'A', 'C', 'A', 'G'])
print(output)

